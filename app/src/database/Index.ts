// app\src\database\Index.ts
import * as SQLite from 'expo-sqlite';
import { Operation } from '../services/FinanceService';

// Type definitions for Category and Account (database entities)
export interface Category {
    id: string;
    name: string;
    isDefault: boolean;
    createdAt: string;
}

export interface Account {
    id: string;
    name: string;
    isDefault: boolean;
    createdAt: string;
}

// Abrindo ou criando banco
const db = SQLite.openDatabaseSync('finance.db');

// Fun√ß√£o auxiliar para converter Blob para Uint8Array
const blobToUint8Array = async (blob: Blob): Promise<Uint8Array> => {
    return new Promise<Uint8Array>((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => {
            if (reader.result instanceof ArrayBuffer) {
                resolve(new Uint8Array(reader.result));
            } else {
                reject(new Error('Falha ao ler blob como ArrayBuffer'));
            }
        };
        reader.onerror = () => reject(new Error('Erro ao ler blob'));
        reader.readAsArrayBuffer(blob);
    });
};

// Criando a tabela se n√£o existir
export const setupDatabase = async () => {

    await db.execAsync(
        `CREATE TABLE IF NOT EXISTS operations (
            id TEXT PRIMARY KEY,
            nature TEXT NOT NULL,
            state TEXT NOT NULL,
            paymentMethod TEXT NOT NULL,
            sourceAccount TEXT NOT NULL,
            destinationAccount TEXT NOT NULL,
            date TEXT NOT NULL,
            value REAL NOT NULL,
            category TEXT NOT NULL,
            details TEXT,
            receipt BLOB, -- campo para armazenar imagem bin√°ria
            project TEXT,
            createdAt TEXT NOT NULL DEFAULT (datetime('now'))
        )`
    );

    // Tabela de categorias
    await db.execAsync(
        `CREATE TABLE IF NOT EXISTS categories (
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL UNIQUE,
            isDefault INTEGER NOT NULL DEFAULT 0,
            createdAt TEXT NOT NULL DEFAULT (datetime('now'))
        )`
    );

    // Tabela de contas
    await db.execAsync(
        `CREATE TABLE IF NOT EXISTS accounts (
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL UNIQUE,
            isDefault INTEGER NOT NULL DEFAULT 0,
            createdAt TEXT NOT NULL DEFAULT (datetime('now'))
        )`
    );

    // √çndices para opera√ß√µes
    await db.execAsync('CREATE INDEX IF NOT EXISTS idx_date ON operations (date);');
    await db.execAsync('CREATE INDEX IF NOT EXISTS idx_category ON operations (category);');
    await db.execAsync('CREATE INDEX IF NOT EXISTS idx_source_account ON operations (sourceAccount);');
    await db.execAsync('CREATE INDEX IF NOT EXISTS idx_destination_account ON operations (destinationAccount);');

    // √çndices para categorias e contas
    await db.execAsync('CREATE INDEX IF NOT EXISTS idx_category_name ON categories (name);');
    await db.execAsync('CREATE INDEX IF NOT EXISTS idx_account_name ON accounts (name);');
    // https://www.sqlite.org/lang_createindex.html

    // Inserir categorias padr√£o se n√£o existirem
    await insertDefaultCategories();
    await insertDefaultAccounts();
};

// Fun√ß√£o para inserir categorias padr√£o
const insertDefaultCategories = async () => {
    const defaultCategories = [
        'Repara√ß√£o', 'Adiantamento-pessoal', 'Movimenta√ß√£o interna',
        'Alimento-supermercado', 'Aluguel', 'Energia-el√©trica',
        'Saneamento-b√°sico', 'Presente', 'Doa√ß√£o', 'Transporte-p√∫blico',
        'Uber', 'Combust√≠vel', 'Sal√°rio-CLT', 'PLR/Comiss√£o', 'Adiantamento-sal√°rio-CLT', 'Vale-refei√ß√£o',
        'Vale-alimenta√ß√£o', 'Cashback', 'Internet-e-plano-resid√™ncia/m√≥vel',
        'Lanche-r√°pido', 'Vestu√°rio', 'Costura-roupa', 'Curso-superior',
        'Curso-t√©cnico', 'Curso-profissionalizante', 'Livro', 'Dentista',
        'Rem√©dio', 'Oftalmologista', '√ìculos-de-grau', 'Suplemento-vitaminas',
        'G√°s-cozinha', 'Financiamento', 'Cons√≥rcio', 'D√≠vida',
        'Assinatura-digital-pessoal', 'Assinatura-digital-profissional',
        'Acess√≥rio-celular', 'bolsa-valores', 'criptomoedas', 'renda-fixa'
    ];

    for (const categoryName of defaultCategories) {
        try {
            await db.runAsync(
                `INSERT OR IGNORE INTO categories (id, name, isDefault, createdAt) VALUES (?, ?, 1, ?);`,
                [`default-${categoryName}`, categoryName, new Date().toISOString()]
            );
        } catch (err) {
            console.log(`Categoria ${categoryName} j√° existe.`);
        }
    }
};

// Fun√ß√£o para inserir contas padr√£o
const insertDefaultAccounts = async () => {
    const defaultAccounts = [
        'Conta Corrente', 'Poupan√ßa', 'Carteira-f√≠sica', 'Cart√£o de Cr√©dito',
        'Conta Digital', 'Investimentos'
    ];
    for (const accountName of defaultAccounts) {
        try {
            await db.runAsync(
                `INSERT OR IGNORE INTO accounts (id, name, isDefault, createdAt) 
                 VALUES (?, ?, 1, ?)`,
                [`default-${accountName}`, accountName, new Date().toISOString()]
            );
        } catch (err) {
            console.log(`Conta ${accountName} j√° existe.`);
        }
    }
};

// CRUD para opera√ß√µes
export const insertOperation = async (operation: Operation) => {
    try {
        console.log('üóÑÔ∏è Iniciando inser√ß√£o de opera√ß√£o no banco...');
        
        const {
            id, nature, state, paymentMethod, sourceAccount, destinationAccount, date, value, category,
            details, receipt, project
        } = operation;

        console.log('üìã Receipt recebido:', receipt ? (typeof receipt === 'string' ? `string(${receipt.length})` : `Uint8Array(${receipt.length} bytes)`) : 'null/undefined');

        // Converter receipt para Uint8Array se for Blob
        let receiptData: Uint8Array | null = null;
        if (receipt) {
            if (receipt instanceof Blob) {
                console.log('üîÑ Convertendo Blob para Uint8Array...');
                receiptData = await blobToUint8Array(receipt);
            } else if (receipt instanceof Uint8Array) {
                console.log('‚úÖ Receipt j√° √© Uint8Array, usando diretamente');
                receiptData = receipt;
            } else if (typeof receipt === 'string') {
                console.log('üìù Receipt √© string, n√£o ser√° salvo como imagem');
                receiptData = null; // String n√£o √© salva no campo BLOB
            }
        }

        console.log('üíæ Receipt final para banco:', receiptData ? `Uint8Array(${receiptData.length} bytes)` : 'null');

        const result = await db.runAsync(
            `INSERT INTO operations (
            id, nature, state, paymentMethod, sourceAccount, destinationAccount, date, value, category,
            details, receipt, project
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);`,
            [id, nature, state, paymentMethod, sourceAccount, destinationAccount, date, value,
             category, details ?? null, receiptData, project ?? null]
        );
        
        console.log('‚úÖ Opera√ß√£o inserida com sucesso!');
        return result;
    } catch (err) {
        console.error('‚ùå Erro ao inserir opera√ß√£o:', err);
        throw new Error('Falha ao salvar opera√ß√£o no banco de dados.');
    }
};

export const updateOperation = async (operation: Operation) => {
    try {
        const {
            id, nature, state, paymentMethod, sourceAccount, destinationAccount, date, value,
            category, details, receipt, project
        } = operation;

        // Converter receipt para Uint8Array se for Blob
        let receiptData: Uint8Array | null = null;
        if (receipt) {
            if (receipt instanceof Blob) {
                receiptData = await blobToUint8Array(receipt);
            } else if (receipt instanceof Uint8Array) {
                receiptData = receipt;
            }
        }

        return await db.runAsync(
            `UPDATE operations SET
                nature = ?, state = ?, paymentMethod = ?, sourceAccount = ?, 
                destinationAccount = ?, date = ?, value = ?, category = ?, 
                details = ?, receipt = ?, project = ?
            WHERE id = ?;`,
            [nature, state, paymentMethod, sourceAccount, destinationAccount, date, value,
             category, details ?? null, receiptData, project ?? null, id]
        );
    } catch (err) {
        console.error('Erro ao atualizar opera√ß√£o:', err);
        throw new Error('Falha ao atualizar opera√ß√£o no banco de dados.');
    }
};

export const deleteOperation = async (id: string) => {
    try {
        return await db.runAsync('DELETE FROM operations WHERE id = ?;', [id]);
    } catch (err) {
        console.error('Erro ao deletar opera√ß√£o:', err);
        throw new Error('Falha ao deletar opera√ß√£o do banco de dados.');
    }
};

export const getAllOperations = async (): Promise<Operation[]> => {
    try {
        const result = await db.getAllAsync<Operation>('SELECT * FROM operations ORDER BY date DESC, createdAt DESC;');
        return result.map(item => ({
            ...item,
            value: Number(item.value), // garantindo tipo number
        }));
    } catch (err) {
        console.error('Erro ao buscar opera√ß√µes:', err);
        throw new Error('Falha ao buscar opera√ß√µes do banco de dados.');
    }
};

// CRUD para categories
export const insertCategory = async (category: Omit<Category, 'id'>) => {
    try {
        const id = `cat-${Date.now()}-${Math.random().toString(36).substring(2, 11)}`;
        return await db.runAsync(
            `INSERT INTO categories (id, name, isDefault, createdAt) VALUES (?, ?, ?, ?)`,
            [id, category.name.trim(), category.isDefault ? 1 : 0, category.createdAt]
        );
    } catch (err) {
        console.error('Erro ao inserir categoria:', err);
        if (err instanceof Error && err.message.includes('UNIQUE constraint failed')) {
            throw new Error('J√° existe uma categoria com este nome.');
        }
        throw new Error('Falha ao salvar categoria no banco de dados.');
    }
};

export const updateCategory = async (category: Category) => {
    try {
        return await db.runAsync(
            `UPDATE categories SET name = ?, isDefault = ? WHERE id = ?`,
            [category.name.trim(), category.isDefault ? 1 : 0, category.id]
        );
    } catch (err) {
        console.error('Erro ao atualizar categoria:', err);
        if (err instanceof Error && err.message.includes('UNIQUE constraint failed')) {
            throw new Error('J√° existe uma categoria com este nome.');
        }
        throw new Error('Falha ao atualizar categoria no banco de dados.');
    }
};

export const deleteCategory = async (id: string) => {
    try {
        // First get the category name
        const categoryResult = await db.getAllAsync<{ name: string }>(
            'SELECT name FROM categories WHERE id = ?',
            [id]
        );
        
        if (categoryResult.length === 0) {
            throw new Error('Categoria n√£o encontrada.');
        }
        
        const categoryName = categoryResult[0].name;
        
        // Check if the category is being used in operations
        const operations = await db.getAllAsync<{ count: number }>(
            'SELECT COUNT(*) as count FROM operations WHERE category = ?',
            [categoryName]
        );
        
        if (operations[0]?.count > 0) {
            throw new Error('N√£o √© poss√≠vel excluir categoria que est√° sendo usada em opera√ß√µes.');
        }

        const result = await db.runAsync('DELETE FROM categories WHERE id = ? AND isDefault = 0', [id]);
        
        if (result.changes === 0) {
            throw new Error('N√£o √© poss√≠vel excluir categoria padr√£o ou categoria n√£o encontrada.');
        }
        
        return result;
    } catch (err) {
        console.error('Erro ao deletar categoria:', err);
        throw err;
    }
};

export const getAllCategories = async (): Promise<Category[]> => {
    try {
        const result = await db.getAllAsync<any>('SELECT * FROM categories ORDER BY isDefault DESC, name ASC');
        return result.map(item => ({
            ...item,
            isDefault: Boolean(item.isDefault),
        }));
    } catch (err) {
        console.error('Erro ao buscar categorias:', err);
        throw new Error('Falha ao buscar categorias do banco de dados.');
    }
};

// CRUD para Contas
export const insertAccount = async (account: Omit<Account, 'id'>) => {
    try {
        const id = `acc-${Date.now()}-${Math.random().toString(36).substring(2, 11)}`;
        return await db.runAsync(
            `INSERT INTO accounts (id, name, isDefault, createdAt) VALUES (?, ?, ?, ?)`,
            [id, account.name.trim(), account.isDefault ? 1 : 0, account.createdAt]
        );
    } catch (err) {
        console.error('Erro ao inserir conta:', err);
        if (err instanceof Error && err.message.includes('UNIQUE constraint failed')) {
            throw new Error('J√° existe uma conta com este nome.');
        }
        throw new Error('Falha ao salvar conta no banco de dados.');
    }
};

export const updateAccount = async (account: Account) => {
    try {
        return await db.runAsync(
            `UPDATE accounts SET name = ?, isDefault = ? WHERE id = ?`,
            [account.name.trim(), account.isDefault ? 1 : 0, account.id]
        );
    } catch (err) {
        console.error('Erro ao atualizar conta:', err);
        if (err instanceof Error && err.message.includes('UNIQUE constraint failed')) {
            throw new Error('J√° existe uma conta com este nome.');
        }
        throw new Error('Falha ao atualizar conta no banco de dados.');
    }
};
 
export const deleteAccount = async (id: string) => {
    try {
        // First get the account name
        const accountResult = await db.getAllAsync<{ name: string }>(
            'SELECT name FROM accounts WHERE id = ?',
            [id]
        );
        
        if (accountResult.length === 0) {
            throw new Error('Conta n√£o encontrada.');
        }
        
        const accountName = accountResult[0].name;
        
        // Check if the account is being used in operations (FIXED: using correct column names)
        const operations = await db.getAllAsync<{ count: number }>(
            `SELECT COUNT(*) as count FROM operations 
             WHERE sourceAccount = ? OR destinationAccount = ?`,
            [accountName, accountName]
        );
        
        if (operations[0]?.count > 0) {
            throw new Error('N√£o √© poss√≠vel excluir conta que est√° sendo usada em opera√ß√µes.');
        }

        const result = await db.runAsync('DELETE FROM accounts WHERE id = ? AND isDefault = 0', [id]);
        
        if (result.changes === 0) {
            throw new Error('N√£o √© poss√≠vel excluir conta padr√£o ou conta n√£o encontrada.');
        }
        
        return result;
    } catch (err) {
        console.error('Erro ao deletar conta:', err);
        throw err;
    }
};

export const getAllAccounts = async (): Promise<Account[]> => {
    try {
        const result = await db.getAllAsync<any>('SELECT * FROM accounts ORDER BY isDefault DESC, name ASC');
        return result.map(item => ({
            ...item,
            isDefault: Boolean(item.isDefault),
        }));
    } catch (err) {
        console.error('Erro ao buscar contas:', err);
        throw new Error('Falha ao buscar contas do banco de dados.');
    }
};

// Additional utility functions
export const getOperationsByDateRange = async (startDate: string, endDate: string): Promise<Operation[]> => {
    try {
        const result = await db.getAllAsync<Operation>(
            'SELECT * FROM operations WHERE date BETWEEN ? AND ? ORDER BY date DESC',
            [startDate, endDate]
        );
        return result.map(item => ({
            ...item,
            value: Number(item.value),
        }));
    } catch (err) {
        console.error('Erro ao buscar opera√ß√µes por per√≠odo:', err);
        throw new Error('Falha ao buscar opera√ß√µes por per√≠odo.');
    }
};

export const getOperationsByCategory = async (categoryName: string): Promise<Operation[]> => {
    try {
        const result = await db.getAllAsync<Operation>(
            'SELECT * FROM operations WHERE category = ? ORDER BY date DESC',
            [categoryName]
        );
        return result.map(item => ({
            ...item,
            value: Number(item.value),
        }));
    } catch (err) {
        console.error('Erro ao buscar opera√ß√µes por categoria:', err);
        throw new Error('Falha ao buscar opera√ß√µes por categoria.');
    }
};

export const getOperationsByAccount = async (accountName: string): Promise<Operation[]> => {
    try {
        const result = await db.getAllAsync<Operation>(
            'SELECT * FROM operations WHERE sourceAccount = ? OR destinationAccount = ? ORDER BY date DESC',
            [accountName, accountName]
        );
        return result.map(item => ({
            ...item,
            value: Number(item.value),
        }));
    } catch (err) {
        console.error('Erro ao buscar opera√ß√µes por conta:', err);
        throw new Error('Falha ao buscar opera√ß√µes por conta.');
    }
};