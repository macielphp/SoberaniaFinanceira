import { getMonthlyFinanceSummaryByUserAndMonth } from '../database/monthly-finance-summary';
import { updateMonthlyFinanceSummary as updateMonthlyFinanceSummaryService } from '../services/FinanceService';
import { Goal } from '../database/goals';

export interface GoalStrategy {
  suggestedMonths: number;
  monthlyContribution: number;
  isFeasible: boolean;
  message: string;
}

/**
 * Calcula a estrat√©gia sugerida para uma meta baseada no valor dispon√≠vel
 */
export function calculateGoalStrategy(
  targetValue: number,
  availablePerMonth: number
): GoalStrategy {
  // Estrat√©gia padr√£o: usar 100% do valor dispon√≠vel
  const suggestedMonths = Math.ceil(targetValue / availablePerMonth);
  const monthlyContribution = targetValue / suggestedMonths;
  
  // Verifica se √© vi√°vel
  const isFeasible = monthlyContribution <= availablePerMonth;
  
  let message = '';
  if (isFeasible) {
    message = `${suggestedMonths}x de ${monthlyContribution.toFixed(2)} = ${targetValue.toFixed(2)} -> ${suggestedMonths} ${suggestedMonths === 1 ? 'm√™s' : 'meses'} de contribui√ß√£o`;
  } else {
    message = `Valor por parcela (${monthlyContribution.toFixed(2)}) maior que o dispon√≠vel (${availablePerMonth.toFixed(2)})`;
  }
  
  return {
    suggestedMonths,
    monthlyContribution,
    isFeasible,
    message
  };
}

/**
 * Valida se uma meta pode ser criada com base no n√∫mero de parcelas escolhido
 */
export function validateGoalParcels(
  targetValue: number,
  numParcels: number,
  availablePerMonth: number
): { isValid: boolean; message: string; monthlyContribution: number } {
  if (numParcels <= 0) {
    return {
      isValid: false,
      message: 'N√∫mero de parcelas deve ser maior que zero',
      monthlyContribution: 0
    };
  }
  
  const monthlyContribution = targetValue / numParcels;
  
  if (monthlyContribution > availablePerMonth) {
    return {
      isValid: false,
      message: `Valor por parcela (${monthlyContribution.toFixed(2)}) maior que o dispon√≠vel (${availablePerMonth.toFixed(2)})`,
      monthlyContribution
    };
  }
  
  return {
    isValid: true,
    message: `Contribui√ß√£o mensal: ${monthlyContribution.toFixed(2)}`,
    monthlyContribution
  };
}

/**
 * Verifica se o usu√°rio pode criar metas (deve ter or√ßamento ativo)
 */
export async function canCreateGoal(userId: string, month: string): Promise<{ canCreate: boolean; message: string }> {
  try {
    console.log('üîç DEBUG canCreateGoal:', { userId, month });
    const summary = await getMonthlyFinanceSummaryByUserAndMonth(userId, month + '-01');
    console.log('  summary encontrado:', summary);
    
    if (!summary) {
      console.log('  Retornando: n√£o pode criar (sem summary)');
      return {
        canCreate: false,
        message: 'Voc√™ precisa criar um or√ßamento antes de definir metas'
      };
    }
    
    console.log('  Retornando: pode criar');
    return {
      canCreate: true,
      message: ''
    };
  } catch (error) {
    console.error('  Erro em canCreateGoal:', error);
    return {
      canCreate: false,
      message: 'Erro ao verificar permiss√£o para criar metas'
    };
  }
}

/**
 * Atualiza o resumo mensal ap√≥s criar/editar uma meta
 */
export async function updateMonthlySummaryAfterGoal(
  userId: string,
  month: string,
  goal: Goal
): Promise<void> {
  try {
    // Atualiza o resumo mensal para refletir a nova contribui√ß√£o
    await updateMonthlyFinanceSummaryService(userId, month);
  } catch (error) {
    console.error('Erro ao atualizar resumo mensal ap√≥s meta:', error);
    throw error;
  }
}

/**
 * Calcula a data de fim da meta baseada na data de in√≠cio e n√∫mero de parcelas
 */
export function calculateGoalEndDate(startDate: string, numParcels: number): string {
  const start = new Date(startDate);
  const end = new Date(start);
  end.setMonth(end.getMonth() + numParcels - 1); // -1 porque a primeira parcela √© no m√™s de in√≠cio
  
  // Ajusta para o √∫ltimo dia do m√™s
  end.setMonth(end.getMonth() + 1, 0);
  
  return end.toISOString().split('T')[0];
}

/**
 * Formata valores monet√°rios para exibi√ß√£o
 */
export function formatCurrency(value: number): string {
  return new Intl.NumberFormat('pt-BR', {
    style: 'currency',
    currency: 'BRL'
  }).format(value);
} 